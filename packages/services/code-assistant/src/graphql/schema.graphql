type Query {
  suggestCode(context: CodeContext!): CodeSuggestion!
  analyzeCode(code: String!): CodeAnalysis!
}

type Mutation {
  submitFeedback(suggestionId: ID!, feedback: FeedbackInput!): Boolean!
}

input CodeContext {
  fileContent: String!
  cursorPosition: Position!
  filePath: String!
  projectContext: ProjectContext!
}

input Position {
  line: Int!
  character: Int!
}

input ProjectContext {
  dependencies: [String!]!
  tsConfig: String
  projectType: ProjectType!
}

enum ProjectType {
  REACT
  NODE
  GRAPHQL
  FULLSTACK
}

type CodeSuggestion {
  id: ID!
  suggestion: String!
  explanation: String!
  confidence: Float!
  references: [CodeReference!]!
}

type CodeAnalysis {
  issues: [CodeIssue!]!
  suggestions: [CodeSuggestion!]!
  complexity: ComplexityAnalysis!
}

type CodeIssue {
  severity: IssueSeverity!
  message: String!
  line: Int!
  character: Int!
}

type ComplexityAnalysis {
  cyclomaticComplexity: Int!
  maintainabilityIndex: Float!
  suggestions: [String!]!
}

type CodeReference {
  title: String!
  url: String!
  relevance: Float!
}

input FeedbackInput {
  rating: Int!
  comment: String
  accepted: Boolean!
}

enum IssueSeverity {
  ERROR
  WARNING
  INFO
}