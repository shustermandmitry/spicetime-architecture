import { useEffect, useState, useCallback } from 'react';
import * as math from 'mathjs';

// Types for messaging and caching
interface TensorUpdate {
  elements: number[][];      // 3x3 tensor elements
  timestamp: number;
  confidence: number;
  validityPeriod: number;   // How long to trust this update
}

interface BatchMeasurement {
  childStates: number[][];
  parentStates: number[][];
  timestamps: number[];
  metadata: {
    deviceId: string;
    batchId: string;
    networkCondition: number; // 0-1 quality indicator
  };
}

// Local tensor cache manager
class TensorCache {
  private cache: TensorUpdate;
  private lastUpdate: number;
  private subscriptions: Set<() => void>;

  constructor(initialTensor: number[][]) {
    this.cache = {
      elements: initialTensor,
      timestamp: Date.now(),
      confidence: 1.0,
      validityPeriod: 3600000 // 1 hour default
    };
    this.lastUpdate = Date.now();
    this.subscriptions = new Set();
  }

  // Get current tensor, with confidence decay
  getTensor(): [math.Matrix, number] {
    const age = Date.now() - this.lastUpdate;
    const confidenceDecay = Math.max(
      0,
      1 - (age / this.cache.validityPeriod)
    );
    
    return [
      math.matrix(this.cache.elements),
      this.cache.confidence * confidenceDecay
    ];
  }

  // Update cache with new tensor
  update(tensorUpdate: TensorUpdate): void {
    this.cache = tensorUpdate;
    this.lastUpdate = Date.now();
    this.notifySubscribers();
  }

  subscribe(callback: () => void): () => void {
    this.subscriptions.add(callback);
    return () => this.subscriptions.delete(callback);
  }

  private notifySubscribers(): void {
    this.subscriptions.forEach(callback => callback());
  }
}

// Batch measurement collector
class BatchCollector {
  private batch: BatchMeasurement;
  private batchSize: number;
  private sendCallback: (batch: BatchMeasurement) => void;

  constructor(deviceId: string, batchSize: number, onSend: (batch: BatchMeasurement) => void) {
    this.batchSize = batchSize;
    this.sendCallback = onSend;
    this.batch = this.createNewBatch(deviceId);
  }

  private createNewBatch(deviceId: string): BatchMeasurement {
    return {
      childStates: [],
      parentStates: [],
      timestamps: [],
      metadata: {
        deviceId,
        batchId: math.random().toString(36).substr(2, 9),
        networkCondition: navigator.onLine ? 1 : 0
      }
    };
  }

  addMeasurement(childState: number[], parentState: number[]): void {
    this.batch.childStates.push(childState);
    this.batch.parentStates.push(parentState);
    this.batch.timestamps.push(Date.now());

    if (this.batch.childStates.length >= this.batchSize) {
      this.sendBatch();
    }
  }

  sendBatch(): void {
    if (this.batch.childStates.length > 0) {
      this.sendCallback(this.batch);
      this.batch = this.createNewBatch(this.batch.metadata.deviceId);
    }
  }
}

// React hook for tensor updates
const useTensorSubscription = (
  deviceId: string,
  initialTensor: number[][],
  batchSize: number = 50
) => {
  const [cache] = useState(() => new TensorCache(initialTensor));
  const [collector] = useState(() => new BatchCollector(
    deviceId,
    batchSize,
    async (batch) => {
      try {
        // Send batch to network
        const response = await fetch('/api/tensor/batch', {
          method: 'POST',
          body: JSON.stringify(batch)
        });
        
        if (response.ok) {
          // Maybe get new tensor update
          const update = await response.json();
          if (update) {
            cache.update(update);
          }
        }
      } catch (error) {
        console.warn('Failed to send batch:', error);
        // Continue with cached tensor
      }
    }
  ));

  // Subscribe to tensor updates from network
  useEffect(() => {
    let active = true;
    
    const subscribe = async () => {
      try {
        const eventSource = new EventSource(`/api/tensor/updates/${deviceId}`);
        
        eventSource.onmessage = (event) => {
          if (active) {
            const update: TensorUpdate = JSON.parse(event.data);
            cache.update(update);
          }
        };

        return () => {
          active = false;
          eventSource.close();
        };
      } catch (error) {
        console.warn('Failed to subscribe to updates:', error);
        // Continue with cached tensor
        return () => {};
      }
    };

    return subscribe();
  }, [deviceId, cache]);

  // Add measurement to batch
  const addMeasurement = useCallback((
    childState: number[],
    parentState: number[]
  ) => {
    collector.addMeasurement(childState, parentState);
  }, [collector]);

  // Force send current batch
  const forceSend = useCallback(() => {
    collector.sendBatch();
  }, [collector]);

  // Get current tensor with confidence
  const getTensor = useCallback(() => {
    return cache.getTensor();
  }, [cache]);

  return {
    addMeasurement,
    forceSend,
    getTensor
  };
};

// Example usage in QGTransform component:
/*
const QGTransform: React.FC<QGTransformProps> = ({
  deviceId,
  initialTensor,
  ...props
}) => {
  const { addMeasurement, getTensor } = useTensorSubscription(
    deviceId,
    initialTensor
  );

  // Use cached tensor for transforms
  const transform = useCallback((childState) => {
    const [tensor, confidence] = getTensor();
    
    // If confidence too low, use more conservative transform
    if (confidence < 0.5) {
      // Use simpler/safer transform
    }
    
    // Normal transform with cached tensor
    const result = math.multiply(childState, tensor);
    
    // Add to batch for network update
    addMeasurement(childState, result);
    
    return result;
  }, [getTensor, addMeasurement]);

  return (
    // Component implementation
  );
};
*/